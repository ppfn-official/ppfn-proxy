// async-handler.ts
const NOP = (req, res, next) => next();
const ENOP = (err, req, res, next) => next();
/**
 * returns async RequestHandler which concatenates the first `handler` and more `handlers` including ErrorRequestHandler.
 */
export function ASYNC(handler, ...handlers) {
    for (const mw of handlers) {
        const args = ("function" === typeof mw) && +mw.length;
        if (mw && args < 4) {
            handler = JOIN(handler, mw);
        }
        else if (args === 4) {
            handler = IFERROR(handler, mw);
        }
        else if (mw != null) {
            throw new TypeError("not a standard handler: " + mw);
        }
    }
    return SAFE(handler);
}
/**
 * returns async RequestHandler which combines the pair of handlers.
 */
function JOIN(A, B) {
    A = SAFE(A);
    B = SAFE(B);
    return (req, res, next) => A(req, res, (err) => (err ? (next && next(err)) : B(req, res, next)));
}
/**
 * returns async RequestHandler that `E` RequestHandler catches an error thrown by `A` RequestHandler.
 */
function IFERROR(A, E) {
    A = SAFE(A);
    E = CATCH(E);
    return (req, res, next) => A(req, res, (err) => (err ? E(err, req, res, next) : (next && next())));
}
/**
 * returns async RequestHandler which catches Promise rejection thrown from `handler`.
 */
function SAFE(handler) {
    if (!handler)
        handler = NOP;
    return async (req, res, next) => {
        try {
            return await handler(req, res, _next);
        }
        catch (e) {
            if (_next)
                return _next(e);
        }
        function _next(e) {
            const fn = next;
            next = null;
            if (fn)
                return fn(e);
        }
    };
}
/**
 * returns async ErrorRequestHandler which catches Promise rejection thrown from `handler`.
 */
export function CATCH(handler) {
    if (!handler)
        handler = ENOP;
    return async (err, req, res, next) => {
        try {
            return await handler(err, req, res, _next);
        }
        catch (e) {
            if (_next)
                return _next(e || err);
        }
        function _next(e) {
            const fn = next;
            next = null;
            if (fn)
                return fn(e);
        }
    };
}
/**
 * returns async ErrorRequestHandler which runs one of `THEN` or `ELSE` handlers after `COND` tester returns a boolean.
 */
export function IF(COND, THEN, ELSE) {
    if (!THEN)
        THEN = NOP;
    if (!ELSE)
        ELSE = NOP;
    return (req, res, next) => Promise.resolve()
        .then(() => COND(req))
        .then(result => result ? THEN(req, res, next) : ELSE(req, res, next));
}
